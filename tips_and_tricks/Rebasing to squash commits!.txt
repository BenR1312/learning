Rebasing to squash commits!

# !Warning! #
# This can potentially be catastrophic if not done with absolute care! #
# !Warning! #

1. For extra security always do this in another branch to play it safe.

2. Pull current branch to ensure no extra work is added
  (eg: work from a different pc on the same branch)

3. Go to your base remote/origin branch (eg: develop)
   pull to ensure it is up to date with the latest work.

4. git rebase --committer-date-is-author-date develop

# Set out rebase with force!
5. git push -f

6. git reset develop
   resets back to develop with all commits reverted and all work still intact.

7. Check all the changes and create the new commits for the work.

8. git push -f

   This will force our changes and demolish the history.
   Now those 30 commits are squashed down to 1 or 2 that will be the entire
   feature and not the 30 commits of minor changes or spec fixes
